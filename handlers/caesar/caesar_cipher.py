from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


from handlers.keyboards import my_inline_keyboard

router = Router()


class Caesar(StatesGroup):
    text = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¶–µ–∑–∞—Ä—è
    shift = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å–¥–≤–∏–≥–∞ —à–∏—Ñ—Ä–∞ –¶–µ–∑–∞—Ä—è



def caesar_cipher(text: str, shift: int):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞: —Ä—É—Å—Å–∫–∏–π –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    def is_cyrillic(s):
        return any('–∞' <= c.lower() <= '—è' for c in s if c.isalpha())

    result = []
    if is_cyrillic(text):
        # –†—É—Å—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç
        alphabet_lower = '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'
        alphabet_upper = alphabet_lower.upper()
        n = len(alphabet_lower)
        for char in text:
            if char in alphabet_lower:
                idx = alphabet_lower.index(char)
                result.append(alphabet_lower[(idx + shift) % n])
            elif char in alphabet_upper:
                idx = alphabet_upper.index(char)
                result.append(alphabet_upper[(idx + shift) % n])
            else:
                result.append(char)
    else:
        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç
        for char in text:
            if char.isalpha():
                shift_base = ord('A') if char.isupper() else ord('a')
                shifted_char = chr((ord(char) - shift_base + shift) % 26 + shift_base)
                result.append(shifted_char)
            else:
                result.append(char)
    return ''.join(result)





@router.callback_query(lambda c: c.data == 'caesar')
async def process_callback_ch(callback: CallbackQuery, state: FSMContext):
    if callback.data == 'caesar':
        await state.set_state(Caesar.text)
        await callback.message.answer('üß† *CRYPTOAI ONLINE*\n' \
        'üì• *–í–≤–µ–¥–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.*\n')

        await callback.message.answer('_–û–∂–∏–¥–∞—é —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥..._')

    await callback.answer()

@router.message(Caesar.text)
async def caesar_get_text(message: Message, state: FSMContext):
    user_text = message.text.strip()

    if not user_text:
        await message.answer('üö´ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.*')
        return
    
    if user_text.isdigit():
        await message.answer('üö´ *–¢–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç.*')
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏



    await state.update_data(text=message.text)
    await state.set_state(Caesar.shift)
    await message.answer('‚öôÔ∏è *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø–µ—Ä–∞—Ü–∏–∏:*\n' \
    '*–í–≤–µ–¥–∏—Ç–µ —Å–¥–≤–∏–≥ —à–∏—Ñ—Ä–∞ –¶–µ–∑–∞—Ä—è (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 25):\n')

    await message.answer('_–ü—Ä–∏–º–µ—Ä: 3, 17, 24..._')

@router.message(Caesar.shift)
async def caesar_get_shift(message: Message, state: FSMContext):
    user_shift = message.text.strip()

    if not user_shift.isdigit():
        await message.answer('üö´ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 25.*')
        return
    
    shift = int(user_shift)
    if shift < 1 or shift > 25:
        await message.answer('üö´ *–°–¥–≤–∏–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 25. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.*')
        return
    
    data = await state.get_data()
    text = data.get('text')

    encrypted = caesar_cipher(text, shift)
    await message.answer('‚úÖ *–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.*')
    await message.answer(f'üîê *–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{encrypted}')
    await state.clear()

    await message.answer(
        "üì° *–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.*\n–ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.",
        reply_markup=my_inline_keyboard
)
    


    


