from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram import Router

from handlers.keyboards import my_inline_keyboard

router = Router()

class DcVernam(StatesGroup):
    cipher_text = State()
    key = State()

@router.callback_query(lambda c: c.data == 'dcvernam')
async def process_callback_dcvr (callback: CallbackQuery, state: FSMContext):
    if callback.data == 'dcvernam':
        await state.set_state(DcVernam.cipher_text)
        await callback.message.answer('üß† *CRYPTOAI ONLINE*\n' \
        'üì• *–í–≤–µ–¥–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (hex-—Å—Ç—Ä–æ–∫—É).*\n')

        await callback.message.answer('_–û–∂–∏–¥–∞—é —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥..._')

    await callback.answer()

@router.message(DcVernam.cipher_text)
async def dcvernam_get_text (message: Message, state: FSMContext):
    user_text = message.text.strip()

    if not user_text:
        await message.answer('üö´ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.*')
        return
    
    await state.update_data(cipher_text=user_text)
    await state.set_state(DcVernam.key)
    await message.answer('‚öôÔ∏è *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø–µ—Ä–∞—Ü–∏–∏:*\n' \
    '*–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è. –î–ª–∏–Ω–∞ –∫–ª—é—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–≤–Ω–∞ –¥–ª–∏–Ω–µ —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç–∞:*\n')

@router.message(DcVernam.key)
async def dcvernam_get_key(message: Message, state: FSMContext):
    user_key = message.text.strip()

    if not user_key:
        await message.answer('üö´ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.*')
        return
    
    data = await state.get_data()
    cipher_text = data.get('cipher_text')

    try:
        cipher_bytes = bytes.fromhex(cipher_text)
    except Exception:
        await message.answer('üö´ *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç–∞ (–æ–∂–∏–¥–∞–µ—Ç—Å—è hex-—Å—Ç—Ä–æ–∫–∞).*')
        return
    
    key_bytes = user_key.encode('utf-8')

    if len(cipher_bytes) != len(key_bytes):
        await message.answer('üö´ *–ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–π –∂–µ –¥–ª–∏–Ω—ã –≤ –±–∞–π—Ç–∞—Ö, —á—Ç–æ –∏ —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç!*')
        return

    # –î–µ—à–∏—Ñ—Ä—É–µ–º (XOR)
    decrypted_bytes = bytes([b ^ k for b, k in zip(cipher_bytes, key_bytes)])
    try:
        decrypted = decrypted_bytes.decode('utf-8')
    except UnicodeDecodeError:
        await message.answer('üö´ *–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ –∏ —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç–∞*')
        return

    await message.answer(f'‚úÖ *–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.*\nüîì *–†–µ–∑—É–ª—å—Ç–∞—Ç:*\n{decrypted}')
    await state.clear()

    await message.answer(
        "üì° *–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.*\n–ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.",
        reply_markup=my_inline_keyboard
    )