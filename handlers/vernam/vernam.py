from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from handlers.keyboards import my_inline_keyboard

router = Router()

class Vernam(StatesGroup):
    text = State()
    key = State()

def vernam_cipher(text: str, key: str) -> bytes:
    text_bytes = text.encode('utf-8')
    key_bytes = key.encode('utf-8')

    if len(text_bytes) != len(key_bytes):
        raise ValueError("–î–ª–∏–Ω–∞ –∫–ª—é—á–∞ –≤ –±–∞–π—Ç–∞—Ö –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–≤–Ω–∞ –¥–ª–∏–Ω–µ —Ç–µ–∫—Å—Ç–∞")

    encrypted = bytes([t ^ k for t, k in zip(text_bytes, key_bytes)])
    return encrypted


@router.callback_query(lambda c: c.data == 'vernam')
async def process_callback_vr (callback: CallbackQuery, state: FSMContext):
    if callback.data == 'vernam':
        await state.set_state(Vernam.text)
        await callback.message.answer('üß† *CRYPTOAI ONLINE*\n' \
        'üì• *–í–≤–µ–¥–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.*\n')

        await callback.message.answer('_–û–∂–∏–¥–∞—é —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥..._')

    await callback.answer()

@router.message(Vernam.text)
async def vernam_get_text(message: Message, state: FSMContext):
    user_text = message.text.strip()

    if not user_text:
        await message.answer('üö´ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.*')
        return
    
    await state.update_data(text=user_text)
    await state.set_state(Vernam.key)
    await message.answer('‚öôÔ∏è *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø–µ—Ä–∞—Ü–∏–∏:*\n' \
    '*–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã). –î–ª–∏–Ω–∞ –∫–ª—é—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–≤–Ω–∞ –¥–ª–∏–Ω–µ —à–∏—Ñ—Ä—É–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:\n')

@router.message(Vernam.key)
async def vernam_get_key (message: Message, state: FSMContext):
    user_key = message.text.strip()

    if not user_key:
        await message.answer('üö´ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.*')
        return
    
    data = await state.get_data()
    text = data.get('text')

    if len(user_key.encode('utf-8')) != len(text.encode('utf-8')):
        await message.answer('üö´ *–ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–π –∂–µ –¥–ª–∏–Ω—ã —á—Ç–æ –∏ —Ç–µ–∫—Å—Ç*')
        return
    
    encrypted = vernam_cipher(text, user_key)
    await message.answer(f'‚úÖ *–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.*\nüîê *–†–µ–∑—É–ª—å—Ç–∞—Ç (hex):*\n{encrypted.hex()}')
    await state.clear()

    await message.answer(
        "üì° *–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.*\n–ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.",
        reply_markup=my_inline_keyboard
    )

